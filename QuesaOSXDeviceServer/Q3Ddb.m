//
//  Q3Ddb.m
//  QuesaOSXDeviceServer - acts as registrar of 3D Controller Devices
//  every 3D Controller Device shall be registered here
//
//  Created by Ole Hartmann on 26.07.11.
//  Copyright 2011 __MyCompanyName__. All rights reserved.
//

#import "Q3Ddb.h"
#import "Q3DcontrollerPDO.h"
#import "IPCprotocolPDO.h"
#import <AppKit/AppKit.h>

@implementation Q3Ddb : NSObject

- (id)init {
    if (self = [super init]) {
		// init my own stuff
		controllerListSerialNumber = 0;
	}
    return self;
}


- (void)dealloc {
    [super dealloc];
}


//vend 3D-device database out of startup code
- (void)applicationDidFinishLaunching:(NSNotification *)notification
{   
	theConnection = [[NSConnection new] autorelease];
	[theConnection setRootObject:self];
	 
	//make name of ControllerDB public
	[theConnection registerName:@kQuesa3DeviceServer];
    [theConnection retain];
    
    _controllerPDOs = [NSMutableArray arrayWithCapacity:2];
    [_controllerPDOs retain];
	
#if 0 	
	NSLog(@"-applicationDidFinishLaunching vended: %@\n",@kQuesa3DeviceServer);
#endif	
}


- (void)incControllerListSerialNumber {
	controllerListSerialNumber++;
}


- (NSUInteger) dbIndexOfTrackerUUID:(NSString *) aTrackerUUID
{
    NSUInteger idx = [_controllerPDOs indexOfObjectPassingTest:
                      ^ BOOL (Q3DcontrollerPDO *obj, NSUInteger idx, BOOL *stop)
                      {
                          return NSOrderedSame==[aTrackerUUID compare:[obj trackerUUID]];
                      }];
    return idx;
};


- (NSUInteger) dbIndexOfUUID:(NSString *) aUUID
{
    NSUInteger idx = [_controllerPDOs indexOfObjectPassingTest:
                      ^ BOOL (Q3DcontrollerPDO *obj, NSUInteger idx, BOOL *stop)
                      {
                          return NSOrderedSame==[aUUID compare:[obj UUID]];
                      }];
    return idx;
};


- (NSUInteger) dbIndexOfSignature:(NSString *) aDriverSignature
{
    NSUInteger idx = [_controllerPDOs indexOfObjectPassingTest:
                      ^ BOOL (Q3DcontrollerPDO *obj, NSUInteger idx, BOOL *stop)
                      {
                          return NSOrderedSame==[aDriverSignature compare:[obj signature]];
                      }];
    return idx;
};


- (NSUInteger) dbIndexOfSControllerRef:(TQ3ControllerRef) aControllerRef
{
    NSUInteger idx = [_controllerPDOs indexOfObjectPassingTest:
                      ^ BOOL (Q3DcontrollerPDO *obj, NSUInteger idx, BOOL *stop)
                      {
                          return (aControllerRef==[obj controllerRef]);
                      }];
    return idx;
};


- (TQ3Boolean) isKnownSignature:(NSString *) aDriverSignature
{
    if (NSNotFound==[self dbIndexOfSignature:aDriverSignature])
        return kQ3False;
    else
        return kQ3True;
};


/* newCC3Controller: called when controller is created
 * allocate, init and vend Q3DcontrollerPDO object
 * return autogenerated server name (including UUID) as key
 */
//create new Controller in db; returns string with key (UUID)
//-----------------------------------------------------------------------------
// used on Server/Driver Side
//-----------------------------------------------------------------------------
- (out NSString *)reNewCC3ControllerWithUUID:(NSString *) aControllerUUID
                              ctrlDriverUUID:(NSString *) aControllerDriverUUID
                               controllerRef:(TQ3ControllerRefCast) aControllerRef
                                  valueCount:(TQ3Uns32) valCnt
                                channelCount:(TQ3Uns32) chanCnt
                                   signature:(NSString *) sig
                         hasSetChannelMethod:(TQ3Boolean) hasSCMthd
                         hasGetChannelMethod:(TQ3Boolean) hasGCMthd
{
    Q3DcontrollerPDO    *theControllerObject;
    
    NSUInteger          foundSignatureAt = [self dbIndexOfSignature:sig];
    
    if (foundSignatureAt < NSNotFound)
    {
        //fetch Controller at recently found index
        //and assign to theControllerObject
        theControllerObject = [_controllerPDOs objectAtIndex:foundSignatureAt];
    }
    else
    {
        theControllerObject = [[[Q3DcontrollerPDO alloc] initWithParametersDB:self
                                                               controllerUUID:aControllerUUID
                                                               ctrlDriverUUID:aControllerDriverUUID
                                                                controllerRef:(TQ3ControllerRef)aControllerRef
                                                                   valueCount:valCnt
                                                                 channelCount:chanCnt
                                                                    signature:sig
                                                          hasSetChannelMethod:hasSCMthd
                                                          hasGetChannelMethod:hasGCMthd] autorelease];
        
        //insert at db list end. Peserve order of insertion!
        [_controllerPDOs addObject:theControllerObject];
    }
    
	[theControllerObject recommissionController];
    [theControllerObject setActivation:kQ3True];//controllerListSerialNumber++;
    
	return [theControllerObject UUID];
}


//next Controller in db; returns string with key (controller UUID); passing NULL returns first in list; returning NULL indicates end of list
- (out TQ3ControllerRefCast)nextCC3Controller: (in TQ3ControllerRefCast) currentControllerRef
//- (out NSString *)nextCC3Controller: (in NSString *) currentControllerKey
{
#if 1
    NSUInteger idx;
    
    if ((TQ3ControllerRefCast)NULL==currentControllerRef)
    {
        idx = 0;
    }
    else
    {
        idx = [self dbIndexOfSControllerRef:(TQ3ControllerRef)currentControllerRef];
        if (NSNotFound==idx)
            return NULL;
        ++idx;
    }
    
    if (idx>=[_controllerPDOs count])
        return NULL;
    return (TQ3ControllerRefCast)[[_controllerPDOs objectAtIndex:idx] controllerRef];
#else
	TQ3Status
	ControllerDB_Next(TQ3ControllerRef controllerRef, TQ3ControllerRef *nextControllerRef)
	{
		TC3ControllerPrivateDataPtr theController = (TC3ControllerPrivateDataPtr)controllerRef;
		
		if (theController==NULL)
		{
			*nextControllerRef=(TQ3ControllerRef)controllerListAnchor;
			return(kQ3Success);
		}
		else
		{
			if (ControllerDB_refinlist(controllerRef)==kQ3True)
			{
				*nextControllerRef=theController->nextPrivateData;
				return(kQ3Success);
			}
			else return kQ3Failure;
		}
	}
	return NULL;
#endif		
};


- (TQ3Status) getListChanged:(inout TQ3Boolean*)listChanged
				SerialNumber:(inout TQ3Uns32*)serNum
{
 	TQ3Status status = kQ3Success;
	
	if (controllerListSerialNumber!=*serNum)
	{
		*listChanged=kQ3True;
		*serNum=controllerListSerialNumber;
	}
	else
	{
		*listChanged=kQ3False;
	}
	return(status);
}


- (TQ3Status) trackerDeleted:(NSString *) deletedTrackerUUID
{
    TQ3Status status = kQ3Failure;
    
    Q3DcontrollerPDO    *theControllerObject;
    
    NSUInteger foundOldTrackerAt = [self dbIndexOfTrackerUUID:deletedTrackerUUID];

    if (NSNotFound!=foundOldTrackerAt)
    {
        //fetch Controller at recently found index
        //and delete the references to its tracker object
        theControllerObject = [_controllerPDOs objectAtIndex:foundOldTrackerAt];
        status = [theControllerObject deleteTracker];
    }
    return status;
}

@end

#pragma mark -
// this is a faceless background application
// TODO: because it is NOT stateless, it shall NOT comply to automatic SIGKILL by the OS (10.6. and later)
int main(int argc, char * argv[]) {
    NSAutoreleasePool * pool = [[NSAutoreleasePool alloc] init];
    NSApplication * application = [NSApplication sharedApplication];
	
    Q3Ddb* Q3DDeviceDbDelegate = [[[Q3Ddb alloc] init] autorelease];
	
    [application setDelegate:Q3DDeviceDbDelegate];
    [application run];
	
    [pool drain];
	
    return EXIT_SUCCESS;
}

